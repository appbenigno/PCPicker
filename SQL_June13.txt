119.185



delimiter //
create procedure getOrder(order_id int)
BEGIN
    select * from order_ where order_.order_id = order_id; 
END//
Delimiter ;



delimiter //
create procedure getInventory()
BEGIN
    select * from inventory;
END//
Delimiter ;




delimiter //
create procedure getOrderDetails( order_id_ int )
BEGIN
    select customer.cust_id, customer.lastname, customer.firstname, customer.address,
		   customer.city, order_.date_created, order_.payment_type
    from order_
    left join customer on order_.cust_id = customer.cust_id
    order by order_.date_created desc;
END//  





delimiter //
create procedure setDelivered
(
    order_id_ varchar(25)
)
BEGIN
    update  set acceptedBy = branch_id where order_.order_id = order_id_;
    update order_ set order_.deliveryDate = STR_TO_DATE(deliveryDate_, '%m/%d/%Y') where order_.order_id = order_id_;
END//  


reate procedure getActivePendingOrders(  )
BEGIN
    select * from order_ where active = true and acceptedBy = null and cancel = false;
END//  

delimiter //
create procedure acceptOrder
(
    order_id_ varchar(25),
    branch_id int,
    deliveryDate_ varchar(25)
)
BEGIN
    update order_ set acceptedBy = branch_id where order_.order_id = order_id_;
    update order_ set order_.deliveryDate = STR_TO_DATE(deliveryDate_, '%m/%d/%Y') where order_.order_id = order_id_;
END//  

delimiter //
create procedure setOrderDeliveryDate
(
    order_id varchar(25),
    deliveryDate_ varchar(25)
)
BEGIN
	update order_ set order_.deliveryDate = STR_TO_DATE(deliveryDate_, '%m/%d/%Y') where order_.order_id = order_id_;
END//  

delimiter //
create procedure getActiveOrders(cust_id_ int)
BEGIN
    select * from order_ 
    where order_.cust_id = cust_id_ 
    and order_.active = true 
    and order_.cancel = false
    order by order_.order_id desc;
END//

delimiter //
create procedure getHistoryOrders(cust_id_ int)
BEGIN
    select * from order_ 
    where order_.cust_id = cust_id_ 
    and order_.active = true 
    and order_.cancel = false
    order by order_.order_id desc;
END//

delimiter //
create procedure getOrderItems(order_id_ int)
BEGIN
    select * from order_part where order_part.order_id = order_id_;
END//

delimiter //
create procedure cancelOrder(order_id_ int)
BEGIN
    update order_ set cancel = true where order_.order_id = order_id_;
    update order_ set active = false where order_.order_id = order_id_;
    update order_ set cancelDate = NOW() where order_id = order_id_;
END//



delimiter //
create procedure getOrderDetails( order_id_ int )
BEGIN
    select customer.cust_id, customer.lastname, customer.firstname, customer.address,
		   customer.city, order_.date_created, order_.payment_type
    from order_
    left join customer on order_.cust_id = customer.cust_id
    order by order_.date_created desc;
END//  


delimiter //
create procedure getActivePendingOrders(  )
BEGIN
    select * from order_ where active = true and acceptedBy = null and cancel = false;
END//  

delimiter //
create procedure acceptOrder
(
    order_id_ varchar(25),
    branch_id int,
    deliveryDate_ varchar(25)
)
BEGIN
    update order_ set acceptedBy = branch_id where order_.order_id = order_id_;
    update order_ set order_.deliveryDate = STR_TO_DATE(deliveryDate_, '%m/%d/%Y') where order_.order_id = order_id_;
END//  

delimiter //
create procedure setOrderDeliveryDate
(
    order_id varchar(25),
    deliveryDate_ varchar(25)
)
BEGIN
	update order_ set order_.deliveryDate = STR_TO_DATE(deliveryDate_, '%m/%d/%Y') where order_.order_id = order_id_;
END//  



delimiter //
create procedure addOrder(cust_id_ int, payment_type varchar(20))
BEGIN
    insert into order_(cust_id,date_created,payment_type) values(cust_id_,NOW(), payment_type);
    SELECT LAST_INSERT_ID() FROM order_;
END//

delimiter //
create procedure addOrderpart(order_id int,  part_id varchar(25), quantity int, price double)
BEGIN
    insert into order_part values(order_id, part_id, quantity, price);
END//



delimiter //
create procedure getPart
(
    part_id_ varchar(25)
)
BEGIN
    select * from part where part.part_id = part_id_;
END//  

delimiter //
create procedure loginCustomer
(
    _username varchar(50),
    _password varchar(50)
)
BEGIN
    select customer.cust_id from customer where customer.username = _username and customer.password = _password;
END//  

delimiter //
create procedure addCustomer(
	_username varchar(50),
    _password varchar(50),
    _address varchar(255),
    _city varchar(50),
    _zip_code int,
    _firstname varchar(50),
    _lastname varchar(50)
)
BEGIN
    insert into customer(username,password,address,city,zip_code,firstname,lastname) values (_username,_password,_address,_city,_zip_code,_firstname,_lastname);
END//
call addCustomer('q','q','q','q',1)
select * from customer

delimiter //
create procedure getManufacturers(parttype_  varchar(50))
BEGIN
    select distinct part_manufacturer from part where part_type = parttype_;
END//


delimiter //
create procedure getMemoryTypes()
BEGIN
    select distinct mem_ddr 
    from part_memory;
END//


delimiter //
create procedure getGPUMemoryTypes()
BEGIN
    select distinct mem_ddr 
    from part_graphicscard;
END//

delimiter //
create procedure getMaxResolutions()
BEGIN
    select distinct max_resolution 
    from part_monitor;
END//

delimiter //
create procedure getAspectRatios()
BEGIN
    select distinct aspect_ratio 
    from peripheral_monitor;
END//




create table part

(
    
	part_id varchar(25),
    
	part_type varchar(50),
    
	part_manufacturer varchar(50),
    
	part_name varchar(50),
    
	part_price double,
    
	primary key (part_id)

);


create table inventory

(
    
	part_id varchar(25),
    
	date_acquired date,
    
	branch_id int,
    
	quantity int,
    
	primary key (part_id, date_acquired, branch_id),
    
	foreign key (part_id) references part(part_id)

);


use pcpicker;
delimiter //
create procedure get_Inventory_list()
begin
	select * from inventory;
end//
delimiter ;




use pcpicker;
delimiter //
create procedure addInventory(part_id varchar (25), date_acquired date, branch_id int, quantity int)
begin
	insert into inventory values(part_id, date_acquired, branch_id, quantity);
end //
delimiter ;


delimiter //
create procedure getHistoryOrders(cust_id_ int)
BEGIN
    select * from order_ 
    where order_.cust_id = cust_id_ 
    and order_.active = false 
    and order_.cancel = false
    order by order_.order_id desc;
END//


insert into branch values(null, 'Bulacan', 'B21 L8 Francisco Homes III', 3023);
call addInventory('ccpu125', '2016-07-01', 1,  4);
call addInventory('ccpu123', '2016-07-01', 1,  6);
call addInventory('ccpu124', '2016-07-01', 1,  6);
call addInventory('cgpu001', '2016-07-01', 1,  8);
call addInventory('cgpu003', '2016-07-01', 1,  1);
call addInventory('ckb001', '2016-07-01', 1,  7);
call addInventory('ckb002', '2016-07-01', 1,  2);
call addInventory('cmbo001', '2016-07-01', 1,  5);
call addInventory('cc001', '2016-07-01', 1,  10);
call addInventory('ccpu125', '2016-07-01', 1,  4);

call addInventory('cmbo002', '2017-01-01', 1,  3);
call addInventory('cmbo003', '2017-01-01', 1,  6);
call addInventory('cmbo004', '2017-01-01', 1,  6);
call addInventory('cmem001', '2017-01-01', 1,  15);
call addInventory('cmem002', '2017-01-01', 1,  12);
call addInventory('cmem003', '2017-01-01', 1,  12);
call addInventory('cmem004', '2017-01-01', 1,  15);
call addInventory('cpsu001', '2017-01-01', 1,  20);


delimiter //
create procedure get_customer_list()
begin
	select * from customer;
end//
delimiter ;

